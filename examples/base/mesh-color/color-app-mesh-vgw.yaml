---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualGateway
metadata:
  name: ingress-gw
  namespace: ${ks_namespace}
spec:
  namespaceSelector:
    matchLabels:
      gateway: ingress-gw
  gatewayRouteSelector:
    matchLabels:
      gateway: ingress-gw
  podSelector:
    matchLabels:
      app: ingress-gw
  listeners:
    - portMapping:
        port: 8088
        protocol: http
  logging:
    accessLog:
      file:
        path: "/dev/stdout"
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: GatewayRoute
metadata:
  name: gateway-route-headers
  namespace: ${ks_namespace}
  labels:
    gateway: ingress-gw
spec:
  httpRoute:
    match:
      prefix: "/headers"
    action:
      target:
        virtualService:
          virtualServiceRef:
            name: color-headers
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: GatewayRoute
metadata:
  name: gateway-route-paths
  namespace: ${ks_namespace}
  labels:
    gateway: ingress-gw
spec:
  httpRoute:
    match:
      prefix: "/paths"
    action:
      target:
        virtualService:
          virtualServiceRef:
            name: color-paths
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: color-headers
  namespace: ${ks_namespace}
spec:
  awsName: color-headers.${ks_namespace}.svc.cluster.local
  provider:
    virtualRouter:
      virtualRouterRef:
        name: color-headers
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: color-paths
  namespace: ${ks_namespace}
spec:
  awsName: color-paths.${ks_namespace}.svc.cluster.local
  provider:
    virtualRouter:
      virtualRouterRef:
        name: color-paths
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualRouter
metadata:
  namespace: ${ks_namespace}
  name: color-headers
spec:
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  routes:
    - name: color-route-blue
      priority: 10
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              match:
                exact: blue
        action:
          weightedTargets:
            - virtualNodeRef:
                name: blue
              weight: 1
    - name: color-route-green
      priority: 20
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              match:
                regex: ".*green.*"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: green
              weight: 1
    - name: color-route-red
      priority: 30
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              match:
                prefix: red
        action:
          weightedTargets:
            - virtualNodeRef:
                name: red
              weight: 1
    - name: color-route-yellow
      priority: 40
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              #no match means if header present
        action:
          weightedTargets:
            - virtualNodeRef:
                name: yellow
              weight: 1
    - name: color-route-white
      httpRoute:
        match:
          #match with no priority
          prefix: /
        action:
          weightedTargets:
            - virtualNodeRef:
                name: white
              weight: 1
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualRouter
metadata:
  namespace: ${ks_namespace}
  name: color-paths
spec:
  listeners:
    - portMapping:
        port: 9080
        protocol: http
  routes:
    - name: color-route-blue
      priority: 10
      httpRoute:
        match:
          prefix: "/blue"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: blue
              weight: 1
        retryPolicy:
          maxRetries: 4
          perRetryTimeout:
            unit: ms
            value: 2000
          httpRetryEvents:
            - server-error
    - name: color-route-green
      priority: 20
      httpRoute:
        match:
          prefix: "/green"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: green
              weight: 1
        retryPolicy:
          maxRetries: 4
          perRetryTimeout:
            unit: ms
            value: 2000
          httpRetryEvents:
            - server-error
    - name: color-route-red
      priority: 30
      httpRoute:
        match:
          prefix: "/red"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: red
              weight: 1
        retryPolicy:
          maxRetries: 4
          perRetryTimeout:
            unit: ms
            value: 2000
          httpRetryEvents:
            - server-error
    - name: color-route-yellow
      priority: 40
      httpRoute:
        match:
          prefix: "/yellow"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: yellow
              weight: 1
        retryPolicy:
          maxRetries: 4
          perRetryTimeout:
            unit: ms
            value: 2000
          httpRetryEvents:
            - server-error
    - name: color-route-white
      httpRoute:
        match:
          prefix: "/"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: white
              weight: 1
        retryPolicy:
          maxRetries: 4
          perRetryTimeout:
            unit: ms
            value: 2000
          httpRetryEvents:
            - server-error
---
apiVersion: v1
kind: Service
metadata:
  name: color-headers
  namespace: ${ks_namespace}
spec:
  ports:
    - port: 9080
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: color-paths
  namespace: ${ks_namespace}
spec:
  ports:
    - port: 9080
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-gw
  namespace: ${ks_namespace}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8088
      name: http
  selector:
    app: ingress-gw
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-gw
  namespace: ${ks_namespace}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-gw
  template:
    metadata:
      labels:
        app: ingress-gw
    spec:
      serviceAccount: appmesh-pod
      containers:
        - name: envoy
          image: "840364872350.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.19.1.0-prod"
          ports:
            - containerPort: 8088
